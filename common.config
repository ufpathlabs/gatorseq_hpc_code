params 
	{

    Ref_Data_Dir="$HOME/GatorSeq_Share/GatorSeq_Resources"
    Containers_Cache_Dir="$HOME/GatorSeq_Share/GatorSeq_Containers"

	human_ref_bwa= "$Ref_Data_Dir/ucsc_hg19/ucsc_hg19_without_halotypes_CRLF2_100bp_padded_chrY_masked_bwa_index/ucsc_hg19_without_halotypes_CRLF2_100bp_padded_chrY_masked_bwa"
	human_ref_fasta="$Ref_Data_Dir/ucsc_hg19/ucsc_hg19_without_halotypes_CRLF2_100bp_padded_chrY_masked.fasta"
    icallsv_resources_folder= "$baseDir/resources/icallsv"



    TRANSVAR_REF_GENOME="$Ref_Data_Dir/TRANSVAR/hg19.fa"

    VEP_FOLDER="$Ref_Data_Dir/VEP/V88"
    VEP_SPECIES="homo_sapiens"
    VEP_ASSEMBLY="GRCh37"
    VEP_FASTA="$Ref_Data_Dir/VEP/V88/Homo_sapiens.GRCh37.dna.primary_assembly.fa.gz"
    VEP_CACHE_VERSION='88'
    VEP_FORK='3'

	SAMPLE_FILE_NAME="${params.SAMPLE_NAME}_${params.TIME_STAMP}"
	
    BASE_FASTQ_DIR = "$HOME/GatorSeq_Share/GatorSeq_Fastq"
    FASTQ_FILES_DIR = "$BASE_FASTQ_DIR/${params.FASTQ_ROOT_DIR_SUFFIX}"

    PADDING_SIZE = '250'
    TARGET_BED_FILE = "$baseDir/resources/2019_08_27_Gatorseq_199_Genes_TLL_MSI_SAMPLEID_AIMS_GENDER_PGX_Probes.bed"
    MERGED_TARGET_BED_FILE = "$baseDir/resources/2019_08_27_Gatorseq_199_Genes_TLL_MSI_SAMPLEID_AIMS_GENDER_PGX_Probes_Merged.bed"
    PADDED_TARGET_BED_FILE = "$baseDir/resources/2019_08_27_Gatorseq_199_Genes_TLL_MSI_SAMPLEID_AIMS_GENDER_PGX_Targets_250bp_padded.bed"

    
    //Docker Containers
    DOCKER_BWA_SAMBAMBA = 'docker://srikarchamala/bwa_sambamba:1.3'
    DOCKER_VARDICTJAVA = 'docker://srikarchamala/vardictjava:1.3'
    DOCKER_GENERATEMETRICS = 'docker://srikarchamala/generatematrix:1.3'
    DOCKER_ICALLSV = 'docker://srikarchamala/icallsv:1.2'
    DOCKER_MSINGS = 'docker://srikarchamala/msings:1.5'



	rm_temp_files = 1
	bed_split_len = 20
	
	
	bwa_map_sort{
		log = ".bwa_map_sort.bam.log"
		threads = 8
		memory="8G"
        temp_dir="temp_dir"
		sambamba_threads=1
		compression_level=0
	}


	merging{
		log="merge_mark_dup.log"
		threads = 8
		merge_bam= "merged.bam"
		dedup_bam = "${params.SAMPLE_FILE_NAME}.bam"
		dedup_bam_bai = "${params.SAMPLE_FILE_NAME}.bam.bai"
	}
	
	vardict{
		log="vardict_variant_call.log"
		threads = 8
        //vardict_program= "/apps/gcc/5.2.0/vardictjava/20160521/build/install/VarDict/bin/VarDict"
       VarDict_out_file = "VarDict.tmp.txt"
       teststrandbias_out_file = "teststrandbias.tmp.txt"

        vardict_vcf_file= "variant.vcf"
        bgzip_vardict_vcf_file= "variant.vcf.gz"
		vcf_file = "${params.SAMPLE_FILE_NAME}.vcf"
	    AF_THR = 0.01
	}

	vepAnnot{
        vep_program= "/apps/vep/88.8/vep"
		log="vep_annotation.log"
		threads = 8
        //decompose_vcf_file= "decompose.variant.vcf"
        norm_vcf_file= "norm.variant.vcf"
        transvar_temp_file= "transvar.variant.txt"
        transvar_vcf_file= "transvar.variant.vcf"
        vep_stat_file= "vep.stats.txt"
        vep_vcf_file= "${params.SAMPLE_FILE_NAME}.vep.vcf.txt"
	}

	iCallSV{
		log= "icallsv_call.log"
		threads = 8
        svConfig= "$baseDir/resources/icallsv/iCallSV_config.ini"
        icallsv_program= "/usr/local/icallsv/0.0.6/lib/python2.7/site-packages/iCallSV-1.0.9-py2.7.egg/iCallSV/iCallSV.py"
        controlBAMFile = "${params.Ref_Data_Dir}/DELLY_CONTROLS/HAP1/NS-18-08_BC706506_p1_20180414072002793846ProdEnv2.0.bam"
        controlID = 'NS-18-08_BC706506_p1'
        outDir= "iCallSV"
        outPrefix= "${params.SAMPLE_NAME}_${params.TIME_STAMP}.Fusions"
        DellyDir="iCallSV/StructuralVariantAnalysis/DellyDir/${params.SAMPLE_NAME}"
        iCallSV_Config="iCallSV/iCallSV_config.ini"

	}

	mSINGS{
		log= "mSINGS_call.log"
		threads = 8

        outDir= "tempout"
        intervals_file= "$baseDir/resources/mSINGS/MSI_Marker_List.msings.msi_intervals"
        bed_file= "$baseDir/resources/mSINGS/MSI_Marker_List.MantisKmers.bed.sorted.bed"
        msi_baseline= "$baseDir/resources/mSINGS/MSI_BASELINE_mod.txt"

        //sorted_bam= "${params.SAMPLE_NAME}.sorted.mSINGS"
        mpileup_file= "${params.SAMPLE_NAME}.mpileup.mSINGS.txt"
        mpileup_file_filtered= "${params.SAMPLE_NAME}.mpileup.filtered.mSINGS.txt"
        varscan_readcounts_file= "${params.SAMPLE_NAME}.varscan.mSINGS.txt"
        msi_analyzer_output= "${params.SAMPLE_NAME}.${params.TIME_STAMP}.mSINGS.msi.txt"
        msi_analysis_output= "${params.SAMPLE_NAME}.${params.TIME_STAMP}.mSINGS.classification.msi.txt"

        //"multiplier" is the number of standard deviations from the baseline that is required to call instability
        multiplier= 2.0

        //"msi_min_threshold" is the maximum fraction of unstable sites allowed to call a specimen MSI negative
        msi_min_threshold= 0.2

        //"msi_max_threshold" is the minimum fraction of unstable sites allowed to call a specimen MSI positive
        msi_max_threshold= 0.2

	}
	generate_metrics_file {
        TESTING_TMP="DF"
        METRICS_SCRIPT="$baseDir/support_scripts/metrics.sh"
		buffer_size="3072"
		sample_id= "${params.SAMPLE_NAME}" 
        sample_name= "${params.SAMPLE_NAME}" 
        run_folder= "${params.RUN_NAME}" 
		log=sample_name +".metrics.log"
        total_bamutils_out= sample_name+ ".bamutil_stats_total.metrics.tmp.txt"
        target_bamutils_out= sample_name + ".bamutil_stats_target.metrics.tmp.txt"
        paddedtarget_bamutils_out= sample_name + ".bamutil_stats_paddedtarget.metrics.tmp.txt"
        coverage_out_merged_target_bed_file= sample_name+ ".bedtools_coverage_out_merged_target_bed_file.metrics.tmp.txt"
        coverage_out_probe_target_bed_file= sample_name + ".bedtools_coverage_out_probe_target_bed_file.metrics.tmp.txt"
        mean_stdev_coverage_out_probe_target_bed_file= sample_name + ".bedtools_mean_stdev_coverage_out_probe_target_bed_file.metrics.tmp.txt"
        bamtools_stats_out= sample_name + ".bamtools_stats_out.metrics.tmp.txt"
        rtgtools_stats_out= sample_name + ".rtgtools_stats_out.metrics.tmp.txt"
        sort_order_chr_names= sample_name + ".sort_order_chr_names.metrics.tmp.txt"
        resort_merged_target_bed_file= sample_name + ".resort_merged_target_bed_file.metrics.tmp.bed"
        resort_probe_target_bed_file= sample_name + ".resort_probe_target_bed_file.metrics.tmp.bed" 
        temp_metrics_file= sample_name + ".metrics.tmp.txt"
		metrics_file = "${params.SAMPLE_FILE_NAME}.summary.csv" 
		coverage_file = "${params.SAMPLE_FILE_NAME}.coverage.csv" 
	}
	
	merge_log_benchmark_files{
        sample_name= "${params.SAMPLE_FILE_NAME}" 
		final_logs = sample_name +".completes_logs.txt"
		final_benchmark = sample_name +".completes_benchmark.txt"
	}
		
	}

